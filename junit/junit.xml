<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="71" time="1.495"><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="6" name="test_empty_validators_list" time="0.0012009143829345703"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="13" name="test_list_implicit_and" time="0.0015494823455810547"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="22" name="test_not_not_all" time="0.004111766815185547"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="56" name="test_validate_or" time="0.0016582012176513672"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="82" name="test_validate_xor" time="0.0015475749969482422"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="106" name="test_validate_and" time="0.002513408660888672"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="8" name="test_validate_field" time="0.0024902820587158203"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="53" name="test_validate_field_property" time="0.00419306755065918"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="103" name="test_validate_field_custom_type" time="0.007856130599975586"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="142" name="test_validate_attr" time="0.02046942710876465"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="154" name="test_validate_arg_nominal_builtin_validators" time="0.005456686019897461"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="184" name="test_validate_out" time="0.0035507678985595703"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="201" name="test_validate_nominal_builtin_validators" time="0.004907846450805664"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="231" name="test_validate_custom_validators_basic" time="0.0050182342529296875"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="279" name="test_validate_custom_validators_with_exception" time="0.0030667781829833984"><system-out>hello
1
2
3
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="332" name="test_validate_mini_lambda" time="0.0021240711212158203"><system-out>Hello, john your age is 20
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="345" name="test_validate_none_enforce" time="0.00792551040649414"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="366" name="test_validate_none_pytypes" time="0.018462657928466797"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="387" name="test_validate_none_is_allowed" time="0.0023224353790283203"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="399" name="test_validate_name_error" time="0.0013611316680908203"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="408" name="test_decorate_manually" time="0.0026040077209472656"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="4" name="test_validate_" time="0.002104043960571289"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="30" name="test_readme_usage_validate__customization" time="0.002532482147216797"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="68" name="test_wrap_valid" time="0.008149385452270508"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_wrap_valid():
        &quot;&quot;&quot; Tests the validation context manager &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        # nominal
        surf = 2
        with wrap_valid(&apos;surface&apos;, surf) as v:
            v.alid = surf &gt; 0 and isfinite(surf)
    
        # wrong value (no inner exception)
        surf = -1
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        # wrong type (inner exception)
        with pytest.raises(ValidationError) as exc_info:
            surf = 1j
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_entry_points_inline.py:95: AssertionError</failure></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="99" name="test_readme_usage_wrap_valid_customization" time="0.008011817932128906"><failure message="assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
  - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
  + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^">def test_readme_usage_wrap_valid_customization():
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = 1j
    
        # (A) custom error message (exception is still a ValidationError)
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf, help_msg=&quot;Surface should be a finite positive integer&quot;) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Surface should be a finite positive integer. Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
E         - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
E         + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^

valid8/tests/test_entry_points_inline.py:112: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="7" name="test_readme_index_combining_enforce" time="0.008120298385620117"><system-out>Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="50" name="test_readme_index_combining_autoclass" time="0.012870311737060547"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="82" name="test_readme_index_combining_autoclass_2" time="0.006025552749633789"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="113" name="test_readme_index_combining_attrs" time="0.0039784908294677734"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="145" name="test_unused_pytypes" time="0.013062715530395508"><system-out>you did it !
you did it !
</system-out></testcase><testcase classname="valid8.tests.test_readme_examples" file="valid8/tests/test_readme_examples.py" line="5" name="test_readme_examples_1" time="0.004881381988525391"></testcase><testcase classname="valid8.tests.test_readme_examples" file="valid8/tests/test_readme_examples.py" line="64" name="test_readme_examples_2" time="0.004887580871582031"></testcase><testcase classname="valid8.tests.test_readme_examples" file="valid8/tests/test_readme_examples.py" line="119" name="test_readme_examples_3" time="0.00560450553894043"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="9" name="test_readme_index_usage_quick" time="0.001300811767578125"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="23" name="test_readme_usage_wrap_valid" time="0.0064105987548828125"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_readme_usage_wrap_valid():
        &quot;&quot;&quot; Tests that the example under index/usage/validation works &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = -1
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        surf = 1j
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_readme_index.py:45: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="77" name="test_readme_usage_customization" time="0.003241300582885742"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="141" name="test_readme_index_usage_basic" time="0.0020287036895751953"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="165" name="test_readme_index_usage_function" time="0.0033402442932128906"><system-out>Building house... DONE !
Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="210" name="test_readme_index_usage_class_fields" time="0.003000497817993164"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="244" name="test_testing" time="0.002118825912475586"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="259" name="test_advanced_composition" time="0.0016977787017822266"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="278" name="test_readme_index_usage_customization" time="0.0022051334381103516"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="337" name="test_readme_index_usage_composition" time="0.003397226333618164"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="8" name="test_tutorial" time="0.0022361278533935547"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="68" name="test_usage_base_validation_functions" time="0.0009975433349609375"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="74" name="test_usage_ensure_valid" time="0.004283905029296875"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="124" name="test_usage_is_valid" time="0.0020346641540527344"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="164" name="test_usage_validators" time="0.0038874149322509766"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="321" name="test_usage_validate_annotation" time="0.0023195743560791016"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="338" name="test_usage_custom_validators" time="0.004827976226806641"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="7" name="test_is_in" time="0.0016107559204101562"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="15" name="test_contains" time="0.0011775493621826172"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="22" name="test_is_subset_is_superset" time="0.002002239227294922"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="45" name="test_on_all" time="0.0015726089477539062"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="54" name="test_on_each" time="0.0015635490417480469"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="63" name="test_haslen" time="0.0010211467742919922"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="70" name="test_minlen" time="0.0010662078857421875"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="77" name="test_minlens" time="0.001993417739868164"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="84" name="test_maxlen" time="0.0013985633850097656"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="91" name="test_maxlens" time="0.0011670589447021484"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="98" name="test_length_between" time="0.0015397071838378906"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="5" name="test_gt" time="0.0012161731719970703"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="12" name="test_gts" time="0.0016598701477050781"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="19" name="test_lt" time="0.001062631607055664"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="26" name="test_lts" time="0.0010831356048583984"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="33" name="test_between" time="0.0010936260223388672"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="5" name="test_is_even" time="0.0017712116241455078"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="11" name="test_is_odd" time="0.0014109611511230469"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="17" name="test_is_multiple_of" time="0.0013663768768310547"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="5" name="test_instance_of" time="0.0014035701751708984"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="31" name="test_subclass_of" time="0.0011219978332519531"></testcase></testsuite>