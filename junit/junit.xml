<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="66" time="1.317"><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="6" name="test_empty_validators_list" time="0.001657724380493164"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="13" name="test_list_implicit_and" time="0.0023212432861328125"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="22" name="test_not_not_all" time="0.004971981048583984"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="56" name="test_validate_or" time="0.0018208026885986328"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="82" name="test_validate_xor" time="0.002281665802001953"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="106" name="test_validate_and" time="0.0016591548919677734"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="8" name="test_validate_field" time="0.002355813980102539"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="53" name="test_validate_field_property" time="0.002271890640258789"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="103" name="test_validate_field_custom_type" time="0.004085063934326172"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="142" name="test_validate_attr" time="0.016663789749145508"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="154" name="test_validate_arg_nominal_builtin_validators" time="0.002946138381958008"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="184" name="test_validate_out" time="0.0040283203125"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="201" name="test_validate_nominal_builtin_validators" time="0.002656698226928711"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="231" name="test_validate_custom_validators_basic" time="0.004134178161621094"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="279" name="test_validate_custom_validators_with_exception" time="0.00454258918762207"><system-out>hello
1
2
3
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="332" name="test_validate_mini_lambda" time="0.001998424530029297"><system-out>Hello, john your age is 20
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="345" name="test_validate_none_enforce" time="0.007493495941162109"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="366" name="test_validate_none_pytypes" time="0.01532292366027832"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="387" name="test_validate_none_is_allowed" time="0.0027120113372802734"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="399" name="test_validate_name_error" time="0.0013170242309570312"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="408" name="test_decorate_manually" time="0.002224445343017578"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="4" name="test_quick_valid" time="0.002348661422729492"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="30" name="test_readme_usage_quick_valid_customization" time="0.002047300338745117"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="68" name="test_wrap_valid" time="0.008565902709960938"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_wrap_valid():
        &quot;&quot;&quot; Tests the wrap_valid context manager &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        # nominal
        surf = 2
        with wrap_valid(&apos;surface&apos;, surf) as v:
            v.alid = surf &gt; 0 and isfinite(surf)
    
        # wrong value (no inner exception)
        surf = -1
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        # wrong type (inner exception)
        with pytest.raises(ValidationError) as exc_info:
            surf = 1j
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_entry_points_inline.py:95: AssertionError</failure></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="99" name="test_readme_usage_wrap_valid_customization" time="0.0075092315673828125"><failure message="assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
  - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
  + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^">def test_readme_usage_wrap_valid_customization():
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = 1j
    
        # (A) custom error message (exception is still a ValidationError)
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf, help_msg=&quot;Surface should be a finite positive integer&quot;) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Surface should be a finite positive integer. Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
E         - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
E         + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^

valid8/tests/test_entry_points_inline.py:112: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="7" name="test_readme_index_combining_enforce" time="0.007986307144165039"><system-out>Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="50" name="test_readme_index_combining_autoclass" time="0.016292572021484375"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="82" name="test_readme_index_combining_autoclass_2" time="0.0089263916015625"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="113" name="test_readme_index_combining_attrs" time="0.005380868911743164"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="145" name="test_unused_pytypes" time="0.016777992248535156"><system-out>you did it !
you did it !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="9" name="test_readme_index_usage_quick" time="0.0015628337860107422"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="23" name="test_readme_usage_wrap_valid" time="0.007233381271362305"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_readme_usage_wrap_valid():
        &quot;&quot;&quot; Tests that the example under index/usage/wrap_valid works &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = -1
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        surf = 1j
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_readme_index.py:45: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="58" name="test_readme_usage_customization" time="0.0056629180908203125"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="122" name="test_readme_index_usage_basic" time="0.0017242431640625"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="146" name="test_readme_index_usage_function" time="0.00442194938659668"><system-out>Building house... DONE !
Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="191" name="test_readme_index_usage_class_fields" time="0.003274202346801758"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="225" name="test_testing" time="0.0021741390228271484"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="240" name="test_advanced_composition" time="0.0012786388397216797"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="259" name="test_readme_index_usage_customization" time="0.002199888229370117"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="318" name="test_readme_index_usage_composition" time="0.005946159362792969"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="5" name="test_tutorial" time="0.004342317581176758"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="67" name="test_usage_base_validation_functions" time="0.0015521049499511719"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="73" name="test_usage_ensure_valid" time="0.0033087730407714844"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="123" name="test_usage_is_valid" time="0.00417327880859375"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="163" name="test_usage_validators" time="0.006050586700439453"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="320" name="test_usage_validate_annotation" time="0.003324270248413086"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="337" name="test_usage_custom_validators" time="0.0027761459350585938"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="7" name="test_is_in" time="0.0016722679138183594"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="15" name="test_is_subset_is_superset" time="0.0020761489868164062"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="38" name="test_on_all" time="0.00231170654296875"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="47" name="test_on_each" time="0.0014412403106689453"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="56" name="test_minlen" time="0.0019500255584716797"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="63" name="test_minlens" time="0.001611471176147461"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="70" name="test_maxlen" time="0.001220703125"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="77" name="test_maxlens" time="0.0009071826934814453"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="84" name="test_length_between" time="0.0014743804931640625"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="5" name="test_gt" time="0.0010559558868408203"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="12" name="test_gts" time="0.001142740249633789"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="19" name="test_lt" time="0.001249074935913086"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="26" name="test_lts" time="0.0012507438659667969"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="33" name="test_between" time="0.0012965202331542969"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="5" name="test_is_even" time="0.0012214183807373047"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="11" name="test_is_odd" time="0.0010862350463867188"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="17" name="test_is_multiple_of" time="0.0013232231140136719"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="5" name="test_instance_of" time="0.0014274120330810547"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="19" name="test_subclass_of" time="0.0011870861053466797"></testcase></testsuite>