<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="2" name="pytest" skips="0" tests="60" time="1.381"><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="6" name="test_empty_validators_list" time="0.002439260482788086"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="13" name="test_list_implicit_and" time="0.0016069412231445312"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="22" name="test_not_not_all" time="0.004302263259887695"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="56" name="test_validate_or" time="0.0016589164733886719"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="82" name="test_validate_xor" time="0.001491546630859375"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="106" name="test_validate_and" time="0.0021963119506835938"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="8" name="test_validate_field" time="0.002108335494995117"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="53" name="test_validate_field_property" time="0.0035152435302734375"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="103" name="test_validate_attr" time="0.01974797248840332"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="115" name="test_validate_arg_nominal_builtin_validators" time="0.004630565643310547"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="145" name="test_validate_out" time="0.0037827491760253906"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="162" name="test_validate_nominal_builtin_validators" time="0.004175662994384766"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="192" name="test_validate_custom_validators_basic" time="0.0025582313537597656"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="238" name="test_validate_custom_validators_with_exception" time="0.002192258834838867"><system-out>hello
1
2
3
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="288" name="test_validate_mini_lambda" time="0.0019099712371826172"><system-out>Hello, john your age is 20
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="301" name="test_validate_none_enforce" time="0.007934808731079102"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="322" name="test_validate_none_pytypes" time="0.017108917236328125"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="343" name="test_validate_none_is_allowed" time="0.0031442642211914062"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="355" name="test_validate_name_error" time="0.0009877681732177734"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="364" name="test_decorate_manually" time="0.0016689300537109375"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="4" name="test_quick_valid" time="0.0012362003326416016"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="30" name="test_readme_usage_quick_valid_customization" time="0.002660989761352539"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="68" name="test_wrap_valid" time="0.011915922164916992"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. TypeError: unorderable types: complex() &gt; int().
  + Error validating [surface=1j]. TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.">def test_wrap_valid():
        &quot;&quot;&quot; Tests the wrap_valid context manager &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        # nominal
        surf = 2
        with wrap_valid(&apos;surface&apos;, surf) as v:
            v.alid = surf &gt; 0 and isfinite(surf)
    
        # wrong value (no inner exception)
        surf = -1
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        # wrong type (inner exception)
        with pytest.raises(ValidationError) as exc_info:
            surf = 1j
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. TypeError: unorderable types: complex() &gt; int().
E         + Error validating [surface=1j]. TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.

valid8/tests/test_entry_points_inline.py:95: AssertionError</failure></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="98" name="test_readme_usage_wrap_valid_customization" time="0.011321306228637695"><failure message="assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
  - Surface should be a finite positive integer. Error validating [surface=1j]. TypeError: unorderable types: complex() &gt; int().
  ?                                                                                        ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Surface should be a finite positive integer. Error validating [surface=1j]. TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                        ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_readme_usage_wrap_valid_customization():
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = 1j
    
        # (A) custom error message (exception is still a ValidationError)
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf, help_msg=&quot;Surface should be a finite positive integer&quot;) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Surface should be a finite positive integer. Error validating [surface=1j]. &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
E         - Surface should be a finite positive integer. Error validating [surface=1j]. TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                        ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Surface should be a finite positive integer. Error validating [surface=1j]. TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                        ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_entry_points_inline.py:111: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="7" name="test_readme_index_usage_basic" time="0.0020864009857177734"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="30" name="test_readme_index_usage_customization" time="0.0018420219421386719"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="86" name="test_readme_index_usage_composition" time="0.004080533981323242"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="156" name="test_readme_index_usage_function" time="0.002775907516479492"><system-out>Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="185" name="test_readme_index_usage_class_fields" time="0.004174947738647461"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="225" name="test_readme_index_combining_enforce" time="0.011360406875610352"><system-out>Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="268" name="test_readme_index_combining_autoclass" time="0.017667055130004883"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="300" name="test_readme_index_combining_autoclass_2" time="0.009300708770751953"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="331" name="test_readme_index_combining_attrs" time="0.003051280975341797"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="363" name="test_unused_pytypes" time="0.019782543182373047"><system-out>you did it !
you did it !
</system-out></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="5" name="test_tutorial" time="0.0037941932678222656"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="66" name="test_usage_base_validation_functions" time="0.0017559528350830078"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="72" name="test_usage_ensure_valid" time="0.005629301071166992"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="122" name="test_usage_is_valid" time="0.00439906120300293"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="162" name="test_usage_validators" time="0.00545191764831543"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="317" name="test_usage_validate_annotation" time="0.0037741661071777344"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="334" name="test_usage_custom_validators" time="0.0030689239501953125"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="7" name="test_is_in" time="0.002377033233642578"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="15" name="test_is_subset_is_superset" time="0.0015451908111572266"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="38" name="test_on_all" time="0.002521514892578125"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="47" name="test_on_each" time="0.0010180473327636719"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="56" name="test_minlen" time="0.0009808540344238281"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="63" name="test_minlens" time="0.0015916824340820312"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="70" name="test_maxlen" time="0.0013952255249023438"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="77" name="test_maxlens" time="0.0008854866027832031"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="84" name="test_length_between" time="0.0009963512420654297"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="5" name="test_gt" time="0.0009884834289550781"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="12" name="test_gts" time="0.0014843940734863281"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="19" name="test_lt" time="0.0016810894012451172"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="26" name="test_lts" time="0.0016014575958251953"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="33" name="test_between" time="0.002088785171508789"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="5" name="test_is_even" time="0.001699686050415039"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="11" name="test_is_odd" time="0.0008831024169921875"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="17" name="test_is_multiple_of" time="0.0009298324584960938"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="5" name="test_instance_of" time="0.0021021366119384766"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="19" name="test_subclass_of" time="0.0014657974243164062"></testcase></testsuite>