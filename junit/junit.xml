<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="66" time="1.254"><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="6" name="test_empty_validators_list" time="0.0009827613830566406"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="13" name="test_list_implicit_and" time="0.001936197280883789"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="22" name="test_not_not_all" time="0.00433349609375"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="56" name="test_validate_or" time="0.0015153884887695312"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="82" name="test_validate_xor" time="0.0021750926971435547"></testcase><testcase classname="valid8.tests.test_composition" file="valid8/tests/test_composition.py" line="106" name="test_validate_and" time="0.0018966197967529297"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="8" name="test_validate_field" time="0.002329111099243164"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="53" name="test_validate_field_property" time="0.004377126693725586"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="103" name="test_validate_field_custom_type" time="0.00459742546081543"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="142" name="test_validate_attr" time="0.014099836349487305"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="154" name="test_validate_arg_nominal_builtin_validators" time="0.005613803863525391"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="184" name="test_validate_out" time="0.0043637752532958984"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="201" name="test_validate_nominal_builtin_validators" time="0.004950284957885742"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="231" name="test_validate_custom_validators_basic" time="0.0031156539916992188"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="279" name="test_validate_custom_validators_with_exception" time="0.0033218860626220703"><system-out>hello
1
2
3
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="332" name="test_validate_mini_lambda" time="0.0023126602172851562"><system-out>Hello, john your age is 20
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="345" name="test_validate_none_enforce" time="0.0046367645263671875"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="366" name="test_validate_none_pytypes" time="0.012981176376342773"><system-out>hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="387" name="test_validate_none_is_allowed" time="0.002275705337524414"><system-out>hello
hello
</system-out></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="399" name="test_validate_name_error" time="0.0011975765228271484"></testcase><testcase classname="valid8.tests.test_entry_points_annotations" file="valid8/tests/test_entry_points_annotations.py" line="408" name="test_decorate_manually" time="0.0017747879028320312"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="4" name="test_quick_valid" time="0.0018024444580078125"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="30" name="test_readme_usage_quick_valid_customization" time="0.002321004867553711"></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="68" name="test_wrap_valid" time="0.007546186447143555"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_wrap_valid():
        &quot;&quot;&quot; Tests the wrap_valid context manager &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        # nominal
        surf = 2
        with wrap_valid(&apos;surface&apos;, surf) as v:
            v.alid = surf &gt; 0 and isfinite(surf)
    
        # wrong value (no inner exception)
        surf = -1
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        # wrong type (inner exception)
        with pytest.raises(ValidationError) as exc_info:
            surf = 1j
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_entry_points_inline.py:95: AssertionError</failure></testcase><testcase classname="valid8.tests.test_entry_points_inline" file="valid8/tests/test_entry_points_inline.py" line="99" name="test_readme_usage_wrap_valid_customization" time="0.00467991828918457"><failure message="assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
  - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
  + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^">def test_readme_usage_wrap_valid_customization():
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = 1j
    
        # (A) custom error message (exception is still a ValidationError)
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf, help_msg=&quot;Surface should be a finite positive integer&quot;) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Surface should be a finite positive integer. Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Surface shou...ex() &gt; int().&apos; == &quot;Surface shoul...x&apos; and &apos;int&apos;.&quot;
E         - Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                                                                          ^^^^^^^^ ^^^^^^^^^^       ^^^^^^^^^^^
E         + Surface should be a finite positive integer. Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                                                                          ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^

valid8/tests/test_entry_points_inline.py:112: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="7" name="test_readme_index_combining_enforce" time="0.008554935455322266"><system-out>Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="50" name="test_readme_index_combining_autoclass" time="0.010894060134887695"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="82" name="test_readme_index_combining_autoclass_2" time="0.004956245422363281"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="113" name="test_readme_index_combining_attrs" time="0.0031244754791259766"></testcase><testcase classname="valid8.tests.test_readme_combining" file="valid8/tests/test_readme_combining.py" line="145" name="test_unused_pytypes" time="0.013212203979492188"><system-out>you did it !
you did it !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="9" name="test_readme_index_usage_quick" time="0.0012640953063964844"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="23" name="test_readme_usage_wrap_valid" time="0.0068132877349853516"><failure message="assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
  - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
  ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
  + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
  ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^">def test_readme_usage_wrap_valid():
        &quot;&quot;&quot; Tests that the example under index/usage/wrap_valid works &quot;&quot;&quot;
    
        from valid8 import wrap_valid
        from math import isfinite
    
        surf = -1
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
        assert str(e) == &quot;Error validating [surface=-1]: &quot; \
                         &quot;validation function [v.alid = surf &gt; 0 and isfinite(surf)] returned [False].&quot;
    
        surf = 1j
    
        with pytest.raises(ValidationError) as exc_info:
            with wrap_valid(&apos;surface&apos;, surf) as v:
                v.alid = surf &gt; 0 and isfinite(surf)
        e = exc_info.value
&gt;       assert str(e) == &quot;Error validating [surface=1j]. &quot; \
                         &quot;Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised &quot; \
                         &quot;TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.&quot;
E       assert &apos;Error valida...ex() &gt; int().&apos; == &quot;Error validat...x&apos; and &apos;int&apos;.&quot;
E         - Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: unorderable types: complex() &gt; int().
E         ?                                                                                                             ^     ^ ^^^^^^^  ^^       ^^^^^   ^^
E         + Error validating [surface=1j]. Validation function [v.alid = surf &gt; 0 and isfinite(surf)] raised TypeError: &apos;&gt;&apos; not supported between instances of &apos;complex&apos; and &apos;int&apos;.
E         ?                                                                                                             ^^^^  +++++++ ++ ++ ^^^^^^^^^^ ^^  ^^^^^       ^^^^^^^   ^

valid8/tests/test_readme_index.py:45: AssertionError</failure></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="77" name="test_readme_usage_customization" time="0.0037190914154052734"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="141" name="test_readme_index_usage_basic" time="0.002244710922241211"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="165" name="test_readme_index_usage_function" time="0.0035734176635742188"><system-out>Building house... DONE !
Building house... DONE !
Building house... DONE !
</system-out></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="210" name="test_readme_index_usage_class_fields" time="0.002391815185546875"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="244" name="test_testing" time="0.0041010379791259766"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="259" name="test_advanced_composition" time="0.0017161369323730469"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="278" name="test_readme_index_usage_customization" time="0.004355907440185547"></testcase><testcase classname="valid8.tests.test_readme_index" file="valid8/tests/test_readme_index.py" line="337" name="test_readme_index_usage_composition" time="0.005106687545776367"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="5" name="test_tutorial" time="0.0019729137420654297"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="67" name="test_usage_base_validation_functions" time="0.0015246868133544922"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="73" name="test_usage_ensure_valid" time="0.004632234573364258"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="123" name="test_usage_is_valid" time="0.0031828880310058594"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="163" name="test_usage_validators" time="0.004096269607543945"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="320" name="test_usage_validate_annotation" time="0.0032529830932617188"></testcase><testcase classname="valid8.tests.test_readme_usage" file="valid8/tests/test_readme_usage.py" line="337" name="test_usage_custom_validators" time="0.002683877944946289"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="7" name="test_is_in" time="0.001361846923828125"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="15" name="test_is_subset_is_superset" time="0.0015721321105957031"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="38" name="test_on_all" time="0.001524209976196289"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="47" name="test_on_each" time="0.0014858245849609375"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="56" name="test_minlen" time="0.0012230873107910156"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="63" name="test_minlens" time="0.0012993812561035156"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="70" name="test_maxlen" time="0.0013773441314697266"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="77" name="test_maxlens" time="0.0012755393981933594"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_collections" file="valid8/tests/test_validation_lib/test_validators_collections.py" line="84" name="test_length_between" time="0.001298666000366211"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="5" name="test_gt" time="0.0012884140014648438"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="12" name="test_gts" time="0.001329183578491211"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="19" name="test_lt" time="0.0013041496276855469"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="26" name="test_lts" time="0.0014977455139160156"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_comparables" file="valid8/tests/test_validation_lib/test_validators_comparables.py" line="33" name="test_between" time="0.001325845718383789"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="5" name="test_is_even" time="0.0011510848999023438"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="11" name="test_is_odd" time="0.0013556480407714844"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_numbers" file="valid8/tests/test_validation_lib/test_validators_numbers.py" line="17" name="test_is_multiple_of" time="0.0008978843688964844"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="5" name="test_instance_of" time="0.0009562969207763672"></testcase><testcase classname="valid8.tests.test_validation_lib.test_validators_types" file="valid8/tests/test_validation_lib/test_validators_types.py" line="19" name="test_subclass_of" time="0.0011293888092041016"></testcase></testsuite>